// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NucleoRH.Models;

namespace NucleoRH.Migrations
{
    [DbContext(typeof(Nucleo_RHContext))]
    [Migration("20220727194049_Departmento")]
    partial class Departmento
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.25")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("NucleoRH.Models.CatAreas", b =>
                {
                    b.Property<int>("AreaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("areaID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AreaDepaId")
                        .HasColumnName("areaDepaID")
                        .HasColumnType("int");

                    b.Property<string>("AreaDescripcion")
                        .HasColumnName("areaDescripcion")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("AreaId");

                    b.HasIndex("AreaDepaId");

                    b.ToTable("cat_Areas");
                });

            modelBuilder.Entity("NucleoRH.Models.CatChecadores", b =>
                {
                    b.Property<int>("ChecId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("checID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ChecDescripcion")
                        .HasColumnName("checDescripcion")
                        .HasColumnType("varchar(20)")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("ChecIp")
                        .HasColumnName("checIP")
                        .HasColumnType("varchar(15)")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<int?>("ChecMinutosDescarga")
                        .HasColumnName("checMinutosDescarga")
                        .HasColumnType("int");

                    b.Property<string>("ChecPathDescarga")
                        .HasColumnName("checPathDescarga")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<int>("ChecSucuId")
                        .HasColumnName("checSucuID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ChecUltimaDescarga")
                        .HasColumnName("checUltimaDescarga")
                        .HasColumnType("datetime");

                    b.HasKey("ChecId");

                    b.HasIndex("ChecSucuId");

                    b.ToTable("cat_Checadores");
                });

            modelBuilder.Entity("NucleoRH.Models.CatDepartamentos", b =>
                {
                    b.Property<int>("DepaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("depaID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DepaDescripcion")
                        .HasColumnName("depaDescripcion")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("DepaJerarquiaSuperiorID")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DepaId");

                    b.ToTable("cat_Departamentos");
                });

            modelBuilder.Entity("NucleoRH.Models.CatDomiciliosColonias", b =>
                {
                    b.Property<int>("DomiColoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("domiColoID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("DomiColoCp")
                        .HasColumnName("domiColoCP")
                        .HasColumnType("int");

                    b.Property<string>("DomiColoDescripcion")
                        .HasColumnName("domiColoDescripcion")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int>("DomiMunicId")
                        .HasColumnName("domiMunicID")
                        .HasColumnType("int");

                    b.HasKey("DomiColoId");

                    b.HasIndex("DomiMunicId");

                    b.ToTable("cat_DomiciliosColonias");
                });

            modelBuilder.Entity("NucleoRH.Models.CatDomiciliosEstados", b =>
                {
                    b.Property<int>("DomiEstaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("domiEstaID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DomiEstaAbrev")
                        .HasColumnName("domiEstaAbrev")
                        .HasColumnType("nchar(2)")
                        .IsFixedLength(true)
                        .HasMaxLength(2);

                    b.Property<string>("DomiEstaDescripcion")
                        .HasColumnName("domiEstaDescripcion")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("DomiEstaId");

                    b.ToTable("cat_DomiciliosEstados");
                });

            modelBuilder.Entity("NucleoRH.Models.CatDomiciliosMunicipios", b =>
                {
                    b.Property<int>("DomiMunicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("domiMunicID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DomiMunicDescripcion")
                        .HasColumnName("domiMunicDescripcion")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int>("DomiMunicEstaId")
                        .HasColumnName("domiMunicEstaID")
                        .HasColumnType("int");

                    b.HasKey("DomiMunicId");

                    b.HasIndex("DomiMunicEstaId");

                    b.ToTable("cat_DomiciliosMunicipios");
                });

            modelBuilder.Entity("NucleoRH.Models.CatEmpleados", b =>
                {
                    b.Property<int>("EmpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("empID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal?>("EmpCelular")
                        .HasColumnName("empCelular")
                        .HasColumnType("numeric(18, 0)");

                    b.Property<string>("EmpComentarios")
                        .HasColumnName("empComentarios")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<string>("EmpCurp")
                        .HasColumnName("empCURP")
                        .HasColumnType("varchar(18)")
                        .HasMaxLength(18)
                        .IsUnicode(false);

                    b.Property<int>("EmpEdocId")
                        .HasColumnName("empEdocID")
                        .HasColumnType("int");

                    b.Property<string>("EmpEmail")
                        .HasColumnName("empEmail")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("EmpEscoId")
                        .HasColumnName("empEscoID")
                        .HasColumnType("int");

                    b.Property<int>("EmpEstId")
                        .HasColumnName("empEstID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EmpFechaIngreso")
                        .HasColumnName("empFechaIngreso")
                        .HasColumnType("date");

                    b.Property<string>("EmpImss")
                        .HasColumnName("empIMSS")
                        .HasColumnType("varchar(11)")
                        .HasMaxLength(11)
                        .IsUnicode(false);

                    b.Property<int>("EmpJornaId")
                        .HasColumnName("empJornaID")
                        .HasColumnType("int");

                    b.Property<string>("EmpMaterno")
                        .HasColumnName("empMaterno")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<DateTime?>("EmpNacFecha")
                        .HasColumnName("empNacFecha")
                        .HasColumnType("date");

                    b.Property<int?>("EmpNacMunicId")
                        .HasColumnName("empNacMunicID")
                        .HasColumnType("int");

                    b.Property<string>("EmpNombre")
                        .HasColumnName("empNombre")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int?>("EmpNumero")
                        .HasColumnName("empNumero")
                        .HasColumnType("int");

                    b.Property<int>("EmpPatId")
                        .HasColumnName("empPatID")
                        .HasColumnType("int");

                    b.Property<string>("EmpPaterno")
                        .HasColumnName("empPaterno")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int>("EmpPuestoId")
                        .HasColumnName("empPuestoID")
                        .HasColumnType("int");

                    b.Property<string>("EmpRfc")
                        .HasColumnName("empRFC")
                        .HasColumnType("varchar(13)")
                        .HasMaxLength(13)
                        .IsUnicode(false);

                    b.Property<int>("EmpSexId")
                        .HasColumnName("empSexID")
                        .HasColumnType("int");

                    b.Property<int>("EmpSucuId")
                        .HasColumnName("empSucuID")
                        .HasColumnType("int");

                    b.Property<decimal?>("EmpTelefono")
                        .HasColumnName("empTelefono")
                        .HasColumnType("numeric(18, 0)");

                    b.Property<int?>("EmpTrabTipoId")
                        .HasColumnName("empTrabTipoID")
                        .HasColumnType("int");

                    b.Property<int>("EmpTurId")
                        .HasColumnName("empTurID")
                        .HasColumnType("int");

                    b.Property<int?>("EmpVacId")
                        .HasColumnName("empVacID")
                        .HasColumnType("int");

                    b.HasKey("EmpId");

                    b.HasIndex("EmpEdocId");

                    b.HasIndex("EmpEscoId");

                    b.HasIndex("EmpEstId");

                    b.HasIndex("EmpJornaId");

                    b.HasIndex("EmpNacMunicId");

                    b.HasIndex("EmpPatId");

                    b.HasIndex("EmpPuestoId");

                    b.HasIndex("EmpSexId");

                    b.HasIndex("EmpSucuId");

                    b.HasIndex("EmpTrabTipoId");

                    b.HasIndex("EmpTurId");

                    b.HasIndex("EmpVacId");

                    b.ToTable("cat_Empleados");
                });

            modelBuilder.Entity("NucleoRH.Models.CatEscolaridades", b =>
                {
                    b.Property<int>("EscoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("escoID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EscoDescripcion")
                        .HasColumnName("escoDescripcion")
                        .HasColumnType("varchar(15)")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.HasKey("EscoId");

                    b.ToTable("cat_Escolaridades");
                });

            modelBuilder.Entity("NucleoRH.Models.CatEstadosCiviles", b =>
                {
                    b.Property<int>("EdocId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("edocID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EdocDescripcion")
                        .HasColumnName("edocDescripcion")
                        .HasColumnType("varchar(15)")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.HasKey("EdocId");

                    b.ToTable("cat_EstadosCiviles");
                });

            modelBuilder.Entity("NucleoRH.Models.CatEstatus", b =>
                {
                    b.Property<int>("EstId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("estID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EstDescripcion")
                        .HasColumnName("estDescripcion")
                        .HasColumnType("varchar(15)")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.HasKey("EstId");

                    b.ToTable("cat_Estatus");
                });

            modelBuilder.Entity("NucleoRH.Models.CatFestivos", b =>
                {
                    b.Property<string>("FestDescripcion")
                        .HasColumnName("festDescripcion")
                        .HasColumnType("varchar(35)")
                        .HasMaxLength(35)
                        .IsUnicode(false);

                    b.Property<DateTime?>("FestFechaDesde")
                        .HasColumnName("festFechaDesde")
                        .HasColumnType("date");

                    b.Property<DateTime?>("FestFechaHasta")
                        .HasColumnName("festFechaHasta")
                        .HasColumnType("date");

                    b.Property<int?>("FestGuardia")
                        .HasColumnName("festGuardia")
                        .HasColumnType("int");

                    b.Property<int>("FestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("festID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FestObservaciones")
                        .HasColumnName("festObservaciones")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("cat_Festivos");
                });

            modelBuilder.Entity("NucleoRH.Models.CatHorarios", b =>
                {
                    b.Property<int>("HoraId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("horaID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<TimeSpan?>("HoraComidaEntrada")
                        .HasColumnName("horaComidaEntrada")
                        .HasColumnType("time");

                    b.Property<TimeSpan?>("HoraComidaSalida")
                        .HasColumnName("horaComidaSalida")
                        .HasColumnType("time");

                    b.Property<TimeSpan?>("HoraEntrada")
                        .HasColumnName("horaEntrada")
                        .HasColumnType("time");

                    b.Property<TimeSpan?>("HoraSabadoComidaEntrada")
                        .HasColumnName("horaSabadoComidaEntrada")
                        .HasColumnType("time");

                    b.Property<TimeSpan?>("HoraSabadoComidaSalida")
                        .HasColumnName("horaSabadoComidaSalida")
                        .HasColumnType("time");

                    b.Property<TimeSpan?>("HoraSabadoEntrada")
                        .HasColumnName("horaSabadoEntrada")
                        .HasColumnType("time");

                    b.Property<TimeSpan?>("HoraSabadoSalida")
                        .HasColumnName("horaSabadoSalida")
                        .HasColumnType("time");

                    b.Property<TimeSpan?>("HoraSalida")
                        .HasColumnName("horaSalida")
                        .HasColumnType("time");

                    b.HasKey("HoraId");

                    b.ToTable("cat_Horarios");
                });

            modelBuilder.Entity("NucleoRH.Models.CatIncidencias", b =>
                {
                    b.Property<int>("InciId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("inciID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("InciDescripcion")
                        .HasColumnName("inciDescripcion")
                        .HasColumnType("varchar(20)")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.HasKey("InciId");

                    b.ToTable("cat_Incidencias");
                });

            modelBuilder.Entity("NucleoRH.Models.CatJornadasLaborales", b =>
                {
                    b.Property<int>("JornaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("jornaID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("JornaDescripcion")
                        .HasColumnName("jornaDescripcion")
                        .HasColumnType("varchar(15)")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.HasKey("JornaId");

                    b.ToTable("cat_JornadasLaborales");
                });

            modelBuilder.Entity("NucleoRH.Models.CatPatrones", b =>
                {
                    b.Property<int>("PatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("patID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("PatAbrev")
                        .HasColumnName("patAbrev")
                        .HasColumnType("varchar(10)")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<int?>("PatColoId")
                        .HasColumnName("patColoID")
                        .HasColumnType("int");

                    b.Property<string>("PatDescripcion")
                        .HasColumnName("patDescripcion")
                        .HasColumnType("varchar(150)")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<string>("PatRegistro")
                        .HasColumnName("patRegistro")
                        .HasColumnType("varchar(20)")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("PatRfc")
                        .HasColumnName("patRFC")
                        .HasColumnType("varchar(18)")
                        .HasMaxLength(18)
                        .IsUnicode(false);

                    b.HasKey("PatId");

                    b.HasIndex("PatColoId");

                    b.ToTable("cat_Patrones");
                });

            modelBuilder.Entity("NucleoRH.Models.CatPeriodos", b =>
                {
                    b.Property<DateTime?>("PerCerrado")
                        .HasColumnName("perCerrado")
                        .HasColumnType("date");

                    b.Property<DateTime?>("PerFechaDesde")
                        .HasColumnName("perFechaDesde")
                        .HasColumnType("date");

                    b.Property<DateTime?>("PerFechaHasta")
                        .HasColumnName("perFechaHasta")
                        .HasColumnType("date");

                    b.Property<int>("PerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("perID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PerNum")
                        .HasColumnName("perNum")
                        .HasColumnType("int");

                    b.ToTable("cat_Periodos");
                });

            modelBuilder.Entity("NucleoRH.Models.CatPlantillas", b =>
                {
                    b.Property<int>("PlantiDepaId")
                        .HasColumnName("plantiDepaID")
                        .HasColumnType("int");

                    b.Property<int>("PlantiId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("plantiID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PlantiPuestoId")
                        .HasColumnName("plantiPuestoID")
                        .HasColumnType("int");

                    b.Property<int>("PlantiSucuId")
                        .HasColumnName("plantiSucuID")
                        .HasColumnType("int");

                    b.ToTable("cat_Plantillas");
                });

            modelBuilder.Entity("NucleoRH.Models.CatPuestos", b =>
                {
                    b.Property<int>("PuestoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("puestoID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PuestoAreaId")
                        .HasColumnName("puestoAreaID")
                        .HasColumnType("int");

                    b.Property<string>("PuestoDescripcion")
                        .HasColumnName("puestoDescripcion")
                        .HasColumnType("varchar(150)")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<int?>("PuestoJerarquiaOrden")
                        .HasColumnName("puestoJerarquiaOrden")
                        .HasColumnType("int");

                    b.Property<int?>("PuestoJerarquiaSuperiorPuestoId")
                        .HasColumnName("puestoJerarquiaSuperiorPuestoID")
                        .HasColumnType("int");

                    b.HasKey("PuestoId");

                    b.HasIndex("PuestoAreaId");

                    b.ToTable("cat_Puestos");
                });

            modelBuilder.Entity("NucleoRH.Models.CatSexos", b =>
                {
                    b.Property<int>("SexId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("sexID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("SexDescripcion")
                        .HasColumnName("sexDescripcion")
                        .HasColumnType("varchar(20)")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.HasKey("SexId");

                    b.ToTable("cat_Sexos");
                });

            modelBuilder.Entity("NucleoRH.Models.CatSucursales", b =>
                {
                    b.Property<int>("SucuId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SucuID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("SucuEmail")
                        .HasColumnType("varchar(150)")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<string>("SucuNcorto")
                        .HasColumnName("SucuNCorto")
                        .HasColumnType("varchar(20)")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("SucuNombre")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("SucuPatId")
                        .HasColumnName("SucuPatID")
                        .HasColumnType("int");

                    b.HasKey("SucuId");

                    b.HasIndex("SucuPatId");

                    b.ToTable("cat_Sucursales");
                });

            modelBuilder.Entity("NucleoRH.Models.CatTrabajadorTipos", b =>
                {
                    b.Property<int>("TrabTipoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("trabTipoID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("TrabTipoDescripcion")
                        .HasColumnName("trabTipoDescripcion")
                        .HasColumnType("varchar(20)")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.HasKey("TrabTipoId");

                    b.ToTable("cat_TrabajadorTipos");
                });

            modelBuilder.Entity("NucleoRH.Models.CatTurnosLaborales", b =>
                {
                    b.Property<int>("TurId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("turID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("TurDescripcion")
                        .HasColumnName("turDescripcion")
                        .HasColumnType("varchar(15)")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.HasKey("TurId");

                    b.ToTable("cat_TurnosLaborales");
                });

            modelBuilder.Entity("NucleoRH.Models.CatVacunacion", b =>
                {
                    b.Property<int>("VacId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("vacID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("VacDescripcion")
                        .HasColumnName("vacDescripcion")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("VacId")
                        .HasName("PK_cat_VacunacionTipos");

                    b.ToTable("cat_Vacunacion");
                });

            modelBuilder.Entity("NucleoRH.Models.CfgParametrosSistema", b =>
                {
                    b.Property<string>("ParamGafetteFrente")
                        .HasColumnName("paramGafetteFrente")
                        .HasColumnType("varchar(250)")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<string>("ParamGafetteReverso")
                        .HasColumnName("paramGafetteReverso")
                        .HasColumnType("varchar(250)")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<int>("ParamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("paramID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ParamMinutosComida")
                        .HasColumnName("paramMinutosComida")
                        .HasColumnType("int");

                    b.Property<int?>("ParamMinutosTolerancia")
                        .HasColumnName("paramMinutosTolerancia")
                        .HasColumnType("int");

                    b.ToTable("cfg_ParametrosSistema");
                });

            modelBuilder.Entity("NucleoRH.Models.MovEmpleadosAsistencias", b =>
                {
                    b.Property<int>("EmpAsisId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("empAsisID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EmpAsisChecId")
                        .HasColumnName("empAsisChecID")
                        .HasColumnType("int");

                    b.Property<int>("EmpAsisEmpId")
                        .HasColumnName("empAsisEmpID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EmpAsisFecha")
                        .HasColumnName("empAsisFecha")
                        .HasColumnType("datetime");

                    b.Property<int>("EmpAsisHoraId")
                        .HasColumnName("empAsisHoraID")
                        .HasColumnType("int");

                    b.HasKey("EmpAsisId");

                    b.HasIndex("EmpAsisChecId");

                    b.HasIndex("EmpAsisEmpId");

                    b.HasIndex("EmpAsisHoraId");

                    b.ToTable("mov_EmpleadosAsistencias");
                });

            modelBuilder.Entity("NucleoRH.Models.MovEmpleadosDomicilios", b =>
                {
                    b.Property<int>("DomiId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("domiID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DomiCalle")
                        .HasColumnName("domiCalle")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("DomiColoId")
                        .HasColumnName("domiColoID")
                        .HasColumnType("int");

                    b.Property<int?>("DomiEmpId")
                        .HasColumnName("domiEmpID")
                        .HasColumnType("int");

                    b.Property<int?>("DomiNumExt")
                        .HasColumnName("domiNumExt")
                        .HasColumnType("int");

                    b.Property<string>("DomiNumInt")
                        .HasColumnName("domiNumInt")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.HasKey("DomiId");

                    b.ToTable("mov_EmpleadosDomicilios");
                });

            modelBuilder.Entity("NucleoRH.Models.MovEmpleadosHorarios", b =>
                {
                    b.Property<int>("EmpHoraEmpId")
                        .HasColumnName("empHoraEmpID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EmpHoraFechaDesde")
                        .HasColumnName("empHoraFechaDesde")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("EmpHoraFechaHasta")
                        .HasColumnName("empHoraFechaHasta")
                        .HasColumnType("datetime");

                    b.Property<int>("EmpHoraHorId")
                        .HasColumnName("empHoraHorID")
                        .HasColumnType("int");

                    b.Property<int>("EmpHoraId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("empHoraID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.ToTable("mov_EmpleadosHorarios");
                });

            modelBuilder.Entity("NucleoRH.Models.MovEmpleadosIncidencias", b =>
                {
                    b.Property<int>("EmpInciId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("empInciID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EmpInciEmpId")
                        .HasColumnName("empInciEmpID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EmpInciFechaDesde")
                        .HasColumnName("empInciFechaDesde")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("EmpInciFechaHasta")
                        .HasColumnName("empInciFechaHasta")
                        .HasColumnType("datetime");

                    b.Property<int?>("EmpInciHoraId")
                        .HasColumnName("empInciHoraID")
                        .HasColumnType("int");

                    b.Property<int>("EmpInciInciId")
                        .HasColumnName("empInciInciID")
                        .HasColumnType("int");

                    b.Property<string>("EmpInciObs")
                        .HasColumnName("empInciObs")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.HasKey("EmpInciId");

                    b.HasIndex("EmpInciEmpId");

                    b.HasIndex("EmpInciHoraId");

                    b.HasIndex("EmpInciInciId");

                    b.ToTable("mov_EmpleadosIncidencias");
                });

            modelBuilder.Entity("NucleoRH.Models.MovEmpleadosSueldos", b =>
                {
                    b.Property<int>("EmpSdoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("empSdoID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal?>("EmpSdoApoyoViviTrans")
                        .HasColumnName("empSdoApoyoViviTrans")
                        .HasColumnType("numeric(18, 0)");

                    b.Property<decimal?>("EmpSdoBono")
                        .HasColumnName("empSdoBono")
                        .HasColumnType("numeric(18, 0)");

                    b.Property<decimal?>("EmpSdoDespensa")
                        .HasColumnName("empSdoDespensa")
                        .HasColumnType("numeric(18, 0)");

                    b.Property<int>("EmpSdoEmpId")
                        .HasColumnName("empSdoEmpID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EmpSdoFechaAlta")
                        .HasColumnName("empSdoFechaAlta")
                        .HasColumnType("datetime");

                    b.Property<decimal?>("EmpSdoPremioAsis")
                        .HasColumnName("empSdoPremioAsis")
                        .HasColumnType("numeric(18, 0)");

                    b.Property<decimal?>("EmpSdoPremioPunt")
                        .HasColumnName("empSdoPremioPunt")
                        .HasColumnType("numeric(18, 0)");

                    b.Property<decimal?>("EmpSdoSdi")
                        .HasColumnName("empSdoSDI")
                        .HasColumnType("numeric(18, 0)");

                    b.Property<decimal?>("EmpSdoSueldoDia")
                        .HasColumnName("empSdoSueldoDia")
                        .HasColumnType("numeric(18, 0)");

                    b.HasKey("EmpSdoId");

                    b.HasIndex("EmpSdoEmpId")
                        .HasName("IX_mov_EmpleadosSueldos");

                    b.ToTable("mov_EmpleadosSueldos");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NucleoRH.Models.CatAreas", b =>
                {
                    b.HasOne("NucleoRH.Models.CatDepartamentos", "AreaDepa")
                        .WithMany("CatAreas")
                        .HasForeignKey("AreaDepaId")
                        .HasConstraintName("FK_cat_Areas_cat_Departamentos")
                        .IsRequired();
                });

            modelBuilder.Entity("NucleoRH.Models.CatChecadores", b =>
                {
                    b.HasOne("NucleoRH.Models.CatSucursales", "ChecSucu")
                        .WithMany("CatChecadores")
                        .HasForeignKey("ChecSucuId")
                        .HasConstraintName("FK_cat_Checadores_cat_Sucursales")
                        .IsRequired();
                });

            modelBuilder.Entity("NucleoRH.Models.CatDomiciliosColonias", b =>
                {
                    b.HasOne("NucleoRH.Models.CatDomiciliosMunicipios", "DomiMunic")
                        .WithMany("CatDomiciliosColonias")
                        .HasForeignKey("DomiMunicId")
                        .HasConstraintName("FK_cat_DomiciliosColonias_cat_DomiciliosMunicipios")
                        .IsRequired();
                });

            modelBuilder.Entity("NucleoRH.Models.CatDomiciliosMunicipios", b =>
                {
                    b.HasOne("NucleoRH.Models.CatDomiciliosEstados", "DomiMunicEsta")
                        .WithMany("CatDomiciliosMunicipios")
                        .HasForeignKey("DomiMunicEstaId")
                        .HasConstraintName("FK_cat_DomiciliosMunicipios_cat_DomiciliosEstados")
                        .IsRequired();
                });

            modelBuilder.Entity("NucleoRH.Models.CatEmpleados", b =>
                {
                    b.HasOne("NucleoRH.Models.CatEstadosCiviles", "EmpEdoc")
                        .WithMany("CatEmpleados")
                        .HasForeignKey("EmpEdocId")
                        .HasConstraintName("FK_cat_Empleados_cat_EstadosCiviles")
                        .IsRequired();

                    b.HasOne("NucleoRH.Models.CatEscolaridades", "EmpEsco")
                        .WithMany("CatEmpleados")
                        .HasForeignKey("EmpEscoId")
                        .HasConstraintName("FK_cat_Empleados_cat_Escolaridades");

                    b.HasOne("NucleoRH.Models.CatEstatus", "EmpEst")
                        .WithMany("CatEmpleados")
                        .HasForeignKey("EmpEstId")
                        .HasConstraintName("FK_cat_Empleados_cat_Estatus")
                        .IsRequired();

                    b.HasOne("NucleoRH.Models.CatJornadasLaborales", "EmpJorna")
                        .WithMany("CatEmpleados")
                        .HasForeignKey("EmpJornaId")
                        .HasConstraintName("FK_cat_Empleados_cat_JornadasLaborales")
                        .IsRequired();

                    b.HasOne("NucleoRH.Models.CatDomiciliosMunicipios", "EmpNacMunic")
                        .WithMany("CatEmpleados")
                        .HasForeignKey("EmpNacMunicId")
                        .HasConstraintName("FK_cat_Empleados_cat_DomiciliosMunicipios");

                    b.HasOne("NucleoRH.Models.CatPatrones", "EmpPat")
                        .WithMany("CatEmpleados")
                        .HasForeignKey("EmpPatId")
                        .HasConstraintName("FK_cat_Empleados_cat_Patrones")
                        .IsRequired();

                    b.HasOne("NucleoRH.Models.CatPuestos", "EmpPuesto")
                        .WithMany("CatEmpleados")
                        .HasForeignKey("EmpPuestoId")
                        .HasConstraintName("FK_cat_Empleados_cat_Puestos")
                        .IsRequired();

                    b.HasOne("NucleoRH.Models.CatSexos", "EmpSex")
                        .WithMany("CatEmpleados")
                        .HasForeignKey("EmpSexId")
                        .HasConstraintName("FK_cat_Empleados_cat_Sexos")
                        .IsRequired();

                    b.HasOne("NucleoRH.Models.CatSucursales", "EmpSucu")
                        .WithMany("CatEmpleados")
                        .HasForeignKey("EmpSucuId")
                        .HasConstraintName("FK_cat_Empleados_cat_Sucursales")
                        .IsRequired();

                    b.HasOne("NucleoRH.Models.CatTrabajadorTipos", "EmpTrabTipo")
                        .WithMany("CatEmpleados")
                        .HasForeignKey("EmpTrabTipoId")
                        .HasConstraintName("FK_cat_Empleados_cat_TrabajadorTipos");

                    b.HasOne("NucleoRH.Models.CatTurnosLaborales", "EmpTur")
                        .WithMany("CatEmpleados")
                        .HasForeignKey("EmpTurId")
                        .HasConstraintName("FK_cat_Empleados_cat_TurnosLaborales")
                        .IsRequired();

                    b.HasOne("NucleoRH.Models.CatVacunacion", "EmpVac")
                        .WithMany("CatEmpleados")
                        .HasForeignKey("EmpVacId")
                        .HasConstraintName("FK_cat_Empleados_cat_Vacunacion");
                });

            modelBuilder.Entity("NucleoRH.Models.CatPatrones", b =>
                {
                    b.HasOne("NucleoRH.Models.CatDomiciliosColonias", "PatColo")
                        .WithMany("CatPatrones")
                        .HasForeignKey("PatColoId")
                        .HasConstraintName("FK_cat_Patrones_cat_DomiciliosColonias");
                });

            modelBuilder.Entity("NucleoRH.Models.CatPuestos", b =>
                {
                    b.HasOne("NucleoRH.Models.CatAreas", "PuestoArea")
                        .WithMany("CatPuestos")
                        .HasForeignKey("PuestoAreaId")
                        .HasConstraintName("FK_cat_Puestos_cat_Areas")
                        .IsRequired();
                });

            modelBuilder.Entity("NucleoRH.Models.CatSucursales", b =>
                {
                    b.HasOne("NucleoRH.Models.CatPatrones", "SucuPat")
                        .WithMany("CatSucursales")
                        .HasForeignKey("SucuPatId")
                        .HasConstraintName("FK_cat_Sucursales_cat_Patrones");
                });

            modelBuilder.Entity("NucleoRH.Models.MovEmpleadosAsistencias", b =>
                {
                    b.HasOne("NucleoRH.Models.CatChecadores", "EmpAsisChec")
                        .WithMany("MovEmpleadosAsistencias")
                        .HasForeignKey("EmpAsisChecId")
                        .HasConstraintName("FK_mov_EmpleadosAsistencias_cat_Checadores")
                        .IsRequired();

                    b.HasOne("NucleoRH.Models.CatEmpleados", "EmpAsisEmp")
                        .WithMany("MovEmpleadosAsistencias")
                        .HasForeignKey("EmpAsisEmpId")
                        .HasConstraintName("FK_mov_EmpleadosAsistencias_cat_Empleados")
                        .IsRequired();

                    b.HasOne("NucleoRH.Models.CatHorarios", "EmpAsisHora")
                        .WithMany("MovEmpleadosAsistencias")
                        .HasForeignKey("EmpAsisHoraId")
                        .HasConstraintName("FK_mov_EmpleadosAsistencias_cat_Horarios")
                        .IsRequired();
                });

            modelBuilder.Entity("NucleoRH.Models.MovEmpleadosIncidencias", b =>
                {
                    b.HasOne("NucleoRH.Models.CatEmpleados", "EmpInciEmp")
                        .WithMany("MovEmpleadosIncidencias")
                        .HasForeignKey("EmpInciEmpId")
                        .HasConstraintName("FK_mov_EmpleadosIncidencias_cat_Empleados")
                        .IsRequired();

                    b.HasOne("NucleoRH.Models.CatHorarios", "EmpInciHora")
                        .WithMany("MovEmpleadosIncidencias")
                        .HasForeignKey("EmpInciHoraId")
                        .HasConstraintName("FK_mov_EmpleadosIncidencias_cat_Horarios");

                    b.HasOne("NucleoRH.Models.CatIncidencias", "EmpInciInci")
                        .WithMany("MovEmpleadosIncidencias")
                        .HasForeignKey("EmpInciInciId")
                        .HasConstraintName("FK_mov_EmpleadosIncidencias_cat_Incidencias")
                        .IsRequired();
                });

            modelBuilder.Entity("NucleoRH.Models.MovEmpleadosSueldos", b =>
                {
                    b.HasOne("NucleoRH.Models.CatEmpleados", "EmpSdoEmp")
                        .WithMany("MovEmpleadosSueldos")
                        .HasForeignKey("EmpSdoEmpId")
                        .HasConstraintName("FK_mov_EmpleadosSueldos_cat_Empleados1")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
